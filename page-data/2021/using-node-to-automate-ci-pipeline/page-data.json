{"componentChunkName":"component---src-components-posts-post-template-index-js","path":"/2021/using-node-to-automate-ci-pipeline/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using NodeJS to automate a ci cd pipeline\",\n  \"date\": \"2021-06-19T00:00:00.000Z\",\n  \"tags\": [\"CI CD\", \"NodeJS\", \"Jenkins\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Info = makeShortcode(\"Info\");\nvar U = makeShortcode(\"U\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Info, {\n    mdxType: \"Info\"\n  }, mdx(\"p\", null, \"  This is how i used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org\"\n  }), \"NodeJS\"), \" to simulate\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.github.com/en/actions\"\n  }), \"github actions\"), \" ci cd pipeline stpes.\")), mdx(\"p\", null, \"Main flow notice the use of \", mdx(U, {\n    mdxType: \"U\"\n  }, \"console.time('label')\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \";(async () => {\\n  console.log(\\\"Starting deployment...\\\")\\n  console.time(\\\"Total deployment time\\\")\\n\\n  // clearWorkspaceDirectory()\\n\\n  const report = await buildAndDeploy()\\n\\n  // printReport(report)\\n\\n  console.log(\\\"Deployment done.\\\")\\n  console.timeEnd(\\\"Total deployment time\\\")\\n})()\\n\")), mdx(\"p\", null, \"Here im iterating services\\nand running my pipeline commands using Javascript\\nthis way makes it easy to run & debug the code strait from VSCode\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"//buildAndDeploy implementation\\n\\nfor (var service of services) {\\n  try {\\n    await runStep(\\n      service,\\n      \\\"clone\\\",\\n      getCloneAndCheckoutScript(\\n        WORKSPACE_DIRECTORY,\\n        service,\\n        \\\"simple-build\\\" // TODO:!!! change to master when finish developing1!!\\n      )\\n    )\\n\\n    await runStep(\\n      service,\\n      \\\"tag\\\",\\n      getTagScript(WORKSPACE_DIRECTORY, service, LGX_GIT_TAG)\\n    )\\n\\n    //TODO: as an improvment this could be replaced with running inside docker container\\n    const serviceDirectory = `${WORKSPACE_DIRECTORY}/${service}`\\n    await runStep(\\n      service,\\n      \\\"build\\\",\\n      `cd ${serviceDirectory} && ./simple-build/build.sh`\\n    )\\n\\n    await runStep(\\n      service,\\n      \\\"storeArtifact\\\",\\n      `WORKSPACE_DIRECTORY=${WORKSPACE_DIRECTORY} LAWGEEX_SERVICE_NAME=${service} LGX_GIT_TAG=${LGX_GIT_TAG} ./frontends-build-and-deploy/push-artifact.sh`\\n    )\\n\\n    await runStep(\\n      service,\\n      \\\"deploy and invalidate cache\\\",\\n      `cd ${serviceDirectory} && LGX_ENV=${LGX_ENV} node ./simple-build/deploy.js`\\n    )\\n\\n    report[service] = { status: \\\"success\\\" }\\n  } catch (err) {\\n    report[service] = { status: \\\"fail\\\", msg: err.msg }\\n  }\\n}\\nreturn report\\n\")), mdx(\"p\", null, \"Example usage of \", mdx(U, {\n    mdxType: \"U\"\n  }, \"Spawn\"), \" to create a new child process\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const runStep = async (service, step, pipelineCommands) => {\\n  console.log(`\\\\n---- STEP : ${step} ----\\\\n`)\\n  console.time(`step - ${step}`)\\n  return new Promise((resolve, reject) => {\\n    const proc = spawn(pipelineCommands, [], { shell: true })\\n\\n    logProgress(proc, service)\\n    proc.on(\\\"close\\\", code => {\\n      if (code === 0) {\\n        console.timeEnd(`step - ${step}`)\\n        resolve()\\n      }\\n      if (code !== 0) {\\n        console.error(\\n          `${service} build encountered an error, child process exited with code ${code}`\\n        )\\n        reject({ service, status: \\\"fail\\\", msg: \\\"failed to \\\" + step })\\n      }\\n    })\\n  })\\n}\\n\\n\\nconst logProgress = (proc, service) => {\\n    // console output will output here\\n    proc.stdout.on('data', (data) => {\\n        console.log(`${service}: ${data}`)\\n    })\\n\\n    proc.stderr.on('data', (data) => {\\n        console.log(`${service}: ${data}`)\\n    })\\n\\n    proc.on('error', (error) => {\\n        console.error(`${service} error: ${error.message}`)\\n    })\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"  This is how i used  NodeJS  to simulate \n   github actions  ci cd pipeline stpes. Main flow notice the use of  console.time('label') Here…","fields":{"slug":"/2021/using-node-to-automate-ci-pipeline/"},"frontmatter":{"title":"Using NodeJS to automate a ci cd pipeline","date":"06/19/2021","tags":["CI CD","NodeJS","Jenkins"]}}},"pageContext":{"slug":"/2021/using-node-to-automate-ci-pipeline/","prev":{"fields":{"slug":"/2020/creating-angular-ci-cd-pipeline-with-github-actions-and-firebase/"},"frontmatter":{"title":"Creating an Angular app CI/CD pipeline with Github Actions & Firebase — (~5min setup)","tags":["Angular","GithubActions","ci/cd","firebase"],"date":"2021-05-13T00:00:00.000Z","excerpt":"github acitons","draft":null}}}}}