{"componentChunkName":"component---src-components-posts-post-template-index-js","path":"/2020/creating-angular-ci-cd-pipeline-with-github-actions-and-firebase copy/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Creating an Angular app CI/CD pipeline with Github Actions & Firebase — (~5min setup)\",\n  \"date\": \"2021-05-13T00:00:00.000Z\",\n  \"tags\": [\"Angular\", \"GithubActions\", \"ci/cd\", \"firebase\"],\n  \"excerpt\": \"github acitons\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"create angular app using the angular-cli\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ng new play-with-github-actions\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"add \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"firebaserc & firebase.json\"), \" files to the root of the project\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"add to root folder \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"github/workflows/\"), mdx(\"b\", null, \"main.yml\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"// .firebaserc\\n{\\n  \\\"projects\\\": {\\n    \\\"default\\\": \\\"liranmeir-actions\\\"\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"// firebase.json\\n{\\n  \\\"hosting\\\": {\\n    \\\"public\\\": \\\"dist/play-with-github-actions\\\",\\n    \\\"ignore\\\": [\\\"firebase.json\\\", \\\"**/.*\\\", \\\"**/node_modules/**\\\"],\\n    \\\"rewrites\\\": [\\n      {\\n        \\\"source\\\": \\\"**\\\",\\n        \\\"destination\\\": \\\"/index.html\\\"\\n      }\\n    ]\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"#  main.yml\\n\\nname: CI-CD\\n\\n# Controls when the action will run. Triggers the workflow on push or pull request\\n# events but only for the master branch\\non:\\n  push:\\n    branches: [master]\\n  pull_request:\\n    branches: [master]\\n\\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\\njobs:\\n  # This workflow contains a single job called \\\"build\\\"\\n  build:\\n    # The type of runner that the job will run on\\n    runs-on: ubuntu-latest\\n\\n    # Steps represent a sequence of tasks that will be executed as part of the job\\n    steps:\\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\\n      - uses: actions/checkout@v2\\n\\n      - name: Use Node.js ${{ matrix.node-version }}\\n        uses: actions/setup-node@v1\\n        with:\\n          node-version: 12.x\\n      - name: install dependencies\\n        run: npm install\\n      - name: build\\n        run: npm run build\\n      - name: test\\n        run: npm run test-headless\\n      - name: Archive Production Artifact\\n        uses: actions/upload-artifact@master\\n        with:\\n          name: dist\\n          path: dist/play-with-github-actions\\n  deploy:\\n    name: Deploy\\n    needs: build\\n    runs-on: ubuntu-latest\\n    steps:\\n      - name: Checkout Repo\\n        uses: actions/checkout@master\\n      - name: Download Artifact\\n        uses: actions/download-artifact@master\\n        with:\\n          name: dist\\n          path: dist/play-with-github-actions\\n      - name: Deploy to Firebase\\n        uses: w9jds/firebase-action@master\\n        with:\\n          args: deploy --only hosting\\n        env:\\n          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"in the terminal hit \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"firebase login:ci\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"then copy the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FIREBASE_TOKEN\"), \" and store it in your GitHub repo\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"settings>Secrets\"), \" section\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Trigger a push/pull request and witness the pipeline being automated \\u2026 Boom!!!\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2400/1*ZtsUu3jwwW_IvWQhvXSGmA.png\",\n    \"alt\": null\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"github acitons","fields":{"slug":"/2020/creating-angular-ci-cd-pipeline-with-github-actions-and-firebase copy/"},"frontmatter":{"title":"Creating an Angular app CI/CD pipeline with Github Actions & Firebase — (~5min setup)","date":"05/13/2021","tags":["Angular","GithubActions","ci/cd","firebase"]}}},"pageContext":{"slug":"/2020/creating-angular-ci-cd-pipeline-with-github-actions-and-firebase copy/","next":{"fields":{"slug":"/2020/creating-angular-ci-cd-pipeline-with-github-actions-and-firebase/"},"frontmatter":{"title":"Creating an Angular app CI/CD pipeline with Github Actions & Firebase — (~5min setup)","tags":["Angular","GithubActions","ci/cd","firebase"],"date":"2021-05-13T00:00:00.000Z","excerpt":"github acitons","draft":null}}}}}